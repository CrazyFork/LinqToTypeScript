import "core-js/modules/es7.symbol.async-iterator";
import { IAsyncEnumerable, IAsyncGrouping, IOrderedAsyncEnumerable } from "./AsyncInterfaces";
import { IComparer, IConstructor, IEqualityComparer, IGrouping, ITuple } from "./Interfaces";
export declare class BasicAsyncEnumerable<T> implements IAsyncEnumerable<T> {
    private readonly iterator;
    constructor(iterator: () => AsyncIterableIterator<T>);
    aggregate<TAccumulate, TResult>(seedOrFunc: ((x: T, y: T) => T) | TAccumulate, func?: (x: TAccumulate, y: T) => TAccumulate, resultSelector?: (x: TAccumulate) => TResult): T | TAccumulate | TResult;
    all(predicate: (x: T) => boolean): Promise<boolean>;
    any(predicate?: (x: T) => boolean): Promise<boolean>;
    average(selector?: (x: T) => number): Promise<number>;
    concat(second: IAsyncEnumerable<T>): IAsyncEnumerable<T>;
    contains(value: T, comparer?: IEqualityComparer<T>): Promise<boolean>;
    count(predicate?: (x: T) => boolean): Promise<number>;
    distinct(comparer?: IEqualityComparer<T>): IAsyncEnumerable<T>;
    elementAt(index: number): Promise<T>;
    elementAtOrDefault(index: number): Promise<T | null>;
    each(action: (x: T) => void): IAsyncEnumerable<T>;
    except(second: IAsyncEnumerable<T>, comparer?: IEqualityComparer<T>): IAsyncEnumerable<T>;
    first(predicate?: (x: T) => boolean): Promise<T>;
    firstOrDefault(predicate?: (x: T) => boolean): Promise<T | null>;
    groupBy<TKey>(keySelector: (x: T) => TKey | string | number, comparer?: IEqualityComparer<TKey>): IAsyncEnumerable<IGrouping<TKey | string | number, T>>;
    groupByWithSel<TSource, TKey, TElement>(keySelector: ((x: TSource) => TKey), elementSelector: (x: TSource) => TElement, comparer?: IEqualityComparer<TKey>): IAsyncEnumerable<IGrouping<TKey, TElement>>;
    intersect(second: IAsyncEnumerable<T>, comparer?: IEqualityComparer<T>): IAsyncEnumerable<T>;
    joinByKey<TInner, TKey, TResult>(inner: IAsyncEnumerable<TInner>, outerKeySelector: (x: T) => TKey, innerKeySelector: (x: TInner) => TKey, resultSelector: (x: T, y: TInner) => TResult, comparer?: IEqualityComparer<TKey>): IAsyncEnumerable<TResult>;
    last(predicate?: (x: T) => boolean): Promise<T>;
    lastOrDefault(predicate?: (x: T) => boolean): Promise<T | null>;
    max(this: IAsyncEnumerable<number> | IAsyncEnumerable<T>, selector?: (x: T) => number): Promise<number>;
    min(this: IAsyncEnumerable<number> | IAsyncEnumerable<T>, selector?: (x: T) => number): Promise<number>;
    ofType<TResult>(type?: IConstructor<TResult> | string): IAsyncEnumerable<TResult>;
    orderBy(predicate: (x: T) => number | string): IOrderedAsyncEnumerable<T>;
    orderBy(predicate: (x: T) => number, comparer: IComparer<number>): IOrderedAsyncEnumerable<T>;
    orderBy(predicate: (x: T) => string, comparer: IComparer<string>): IOrderedAsyncEnumerable<T>;
    orderByDescending(predicate: (x: T) => string | number, comparer?: IComparer<string> | IComparer<number>): IOrderedAsyncEnumerable<T>;
    reverse(): IAsyncEnumerable<T>;
    select<OUT>(selector: (x: T) => OUT): IAsyncEnumerable<OUT>;
    selectMany<Y>(selector: (x: T) => Iterable<Y>): IAsyncEnumerable<Y>;
    sequenceEquals(second: IAsyncEnumerable<T>, comparer?: IEqualityComparer<T>): Promise<boolean>;
    single(predicate?: (x: T) => boolean): Promise<T>;
    singleOrDefault(predicate?: (x: T) => boolean): Promise<T | null>;
    skip(count: number): IAsyncEnumerable<T>;
    skipWhile(predicate: ((x: T) => boolean) | ((x: T, index: number) => boolean)): IAsyncEnumerable<T>;
    sum(this: IAsyncEnumerable<number> | IAsyncEnumerable<T>, selector?: (x: T) => number): Promise<number>;
    take(amount: number): IAsyncEnumerable<T>;
    takeWhile(predicate: ((x: T) => boolean) | ((x: T, index: number) => boolean)): IAsyncEnumerable<T>;
    toArray(): Promise<T[]>;
    toMap<TKey>(selector: (x: T) => TKey): Promise<Map<TKey, T[]>>;
    toSet(): Promise<Set<T>>;
    union(second: IAsyncEnumerable<T>, comparer?: IEqualityComparer<T>): IAsyncEnumerable<T>;
    where(predicate: ((x: T) => boolean) | ((x: T, index: number) => boolean)): IAsyncEnumerable<T>;
    zip<Y, OUT>(second: IAsyncEnumerable<Y>, resultSelector?: (x: T, y: Y) => OUT): IAsyncEnumerable<OUT> | IAsyncEnumerable<ITuple<T, Y>>;
    [Symbol.asyncIterator](): AsyncIterableIterator<T>;
}
export declare class AsyncGrouping<TKey, TValue> extends Array<Promise<TValue>> implements IAsyncGrouping<TKey, TValue> {
    readonly key: TKey;
    private currentIndex;
    constructor(key: TKey, startingItem: Promise<TValue>);
    next(): Promise<IteratorResult<TValue>>;
    [Symbol.asyncIterator](): AsyncIterableIterator<TValue>;
}
export declare class AsyncEnumerable {
    static aggregate<TSource>(source: AsyncIterable<TSource>, func: (x: TSource, y: TSource) => TSource): Promise<TSource>;
    static aggregate<TSource, TAccumulate>(source: AsyncIterable<TSource>, seed: TAccumulate, func: (x: TAccumulate, y: TSource) => TAccumulate): Promise<TAccumulate>;
    static aggregate<TSource, TAccumulate, TResult>(source: AsyncIterable<TSource>, seed: TAccumulate, func: (x: TAccumulate, y: TSource) => TAccumulate, resultSelector: (x: TAccumulate) => TResult): Promise<TResult>;
    private static aggregate_1<TSource>(source, func);
    private static aggregate_2<TSource, TAccumulate>(source, seed, func);
    private static aggregate_3<TSource, TAccumulate, TResult>(source, seed, func, resultSelector);
    static all<TSource>(source: IAsyncEnumerable<TSource>, predicate: (x: TSource) => boolean): Promise<boolean>;
    static any<TSource>(source: IAsyncEnumerable<TSource>): Promise<boolean>;
    static any<TSource>(source: IAsyncEnumerable<TSource>, predicate: (x: TSource) => boolean): Promise<boolean>;
    private static any_1<TSource>(source);
    private static any_2<TSource>(source, predicate);
    static average(source: IAsyncEnumerable<number>): Promise<number>;
    static average<TSource>(source: IAsyncEnumerable<TSource>, selector: (x: TSource) => number): Promise<number>;
    private static average_1(source);
    private static average_2<TSource>(source, func);
    static concat<TSource>(first: IAsyncEnumerable<TSource>, second: IAsyncEnumerable<TSource>): IAsyncEnumerable<TSource>;
    static contains<TSource>(source: AsyncIterable<TSource>, value: TSource): Promise<boolean>;
    static contains<TSource>(source: AsyncIterable<TSource>, value: TSource, comparer: IEqualityComparer<TSource>): Promise<boolean>;
    static count<TSource>(source: AsyncIterable<TSource>): Promise<number>;
    static count<TSource>(source: AsyncIterable<TSource>, predicate: (x: TSource) => boolean): Promise<number>;
    private static count_1<T>(source);
    private static count_2<T>(source, predicate);
    static distinct<TSource>(source: IAsyncEnumerable<TSource>): IAsyncEnumerable<TSource>;
    static distinct<TSource>(source: IAsyncEnumerable<TSource>, comparer: IEqualityComparer<TSource>): IAsyncEnumerable<TSource>;
    static elementAt<TSource>(source: AsyncIterable<TSource>, index: number): Promise<TSource>;
    static elementAtOrDefault<TSource>(source: AsyncIterable<TSource>, index: number): Promise<TSource | null>;
    static enumerateObject<TInput>(source: TInput): IAsyncEnumerable<ITuple<keyof TInput, TInput[keyof TInput]>>;
    static except<TSource>(first: IAsyncEnumerable<TSource>, second: IAsyncEnumerable<TSource>): IAsyncEnumerable<TSource>;
    static except<TSource>(first: IAsyncEnumerable<TSource>, second: IAsyncEnumerable<TSource>, comparer: IEqualityComparer<TSource>): IAsyncEnumerable<TSource>;
    static first<TSource>(source: AsyncIterable<TSource>): Promise<TSource>;
    static first<TSource>(source: AsyncIterable<TSource>, predicate: (x: TSource) => boolean): Promise<TSource>;
    private static first_1<T>(source);
    private static first_2<T>(source, predicate);
    static firstOrDefault<T>(source: AsyncIterable<T>): Promise<T | null>;
    static firstOrDefault<T>(source: AsyncIterable<T>, predicate: (x: T) => boolean): Promise<T | null>;
    private static firstOrDefault_1<T>(source);
    private static firstOrDefault_2<T>(source, predicate);
    static flatten<TSource>(source: IAsyncEnumerable<TSource | IAsyncEnumerable<TSource>>): IAsyncEnumerable<TSource>;
    static flatten<TSource>(source: IAsyncEnumerable<TSource | IAsyncEnumerable<TSource>>, shallow: false): IAsyncEnumerable<TSource>;
    static flatten<TSource>(source: IAsyncEnumerable<TSource | IAsyncEnumerable<TSource>>, shallow: true): IAsyncEnumerable<TSource | AsyncIterable<TSource>>;
    static from<TSource>(promises: Promise<TSource>[]): IAsyncEnumerable<TSource>;
    static from<TSource>(asyncIterable: () => AsyncIterableIterator<TSource>): IAsyncEnumerable<TSource>;
    static fromEvent<K extends keyof HTMLElementEventMap>(element: Element, type: K): IAsyncEnumerable<HTMLElementEventMap[K]>;
    static fromEvent(element: Element, type: string): IAsyncEnumerable<Event>;
    static each<TSource>(source: IAsyncEnumerable<TSource>, action: (x: TSource) => void): IAsyncEnumerable<TSource>;
    static groupBy<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => number): IAsyncEnumerable<IGrouping<number, TSource>>;
    static groupBy<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => string): IAsyncEnumerable<IGrouping<string, TSource>>;
    static groupBy<TSource, TKey>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => TKey, comparer: IEqualityComparer<TKey>): IAsyncEnumerable<IGrouping<TKey, TSource>>;
    private static groupBy_0_Simple<TSource>(source, keySelector);
    private static groupBy_0<TSource, TKey>(source, keySelector, comparer);
    static groupByWithSel<TSource, TElement>(source: IAsyncEnumerable<TSource>, keySelector: ((x: TSource) => number), elementSelector: (x: TSource) => TElement): IAsyncEnumerable<IGrouping<number, TElement>>;
    static groupByWithSel<TSource, TElement>(source: IAsyncEnumerable<TSource>, keySelector: ((x: TSource) => string), elementSelector: (x: TSource) => TElement): IAsyncEnumerable<IGrouping<string, TElement>>;
    static groupByWithSel<TSource, TKey, TElement>(source: IAsyncEnumerable<TSource>, keySelector: ((x: TSource) => TKey), elementSelector: (x: TSource) => TElement, comparer: IEqualityComparer<TKey>): IAsyncEnumerable<IGrouping<TKey, TElement>>;
    private static GroupBy_1_Simple<TSource, TElement>(source, keySelector, elementSelector);
    private static GroupBy_1<TSource, TKey, TElement>(source, keySelector, elementSelector, comparer);
    static join<TOuter, TInner, TKey, TResult>(outer: IAsyncEnumerable<TOuter>, inner: IAsyncEnumerable<TInner>, outerKeySelector: (x: TOuter) => TKey, innerKeySelector: (x: TInner) => TKey, resultSelector: (x: TOuter, y: TInner) => TResult): IAsyncEnumerable<TResult>;
    static join<TOuter, TInner, TKey, TResult>(outer: IAsyncEnumerable<TOuter>, inner: IAsyncEnumerable<TInner>, outerKeySelector: (x: TOuter) => TKey, innerKeySelector: (x: TInner) => TKey, resultSelector: (x: TOuter, y: TInner) => TResult, comparer: IEqualityComparer<TKey>): IAsyncEnumerable<TResult>;
    static intersect<TSource>(first: IAsyncEnumerable<TSource>, second: IAsyncEnumerable<TSource>): IAsyncEnumerable<TSource>;
    static intersect<TSource>(first: IAsyncEnumerable<TSource>, second: IAsyncEnumerable<TSource>, comparer: IEqualityComparer<TSource>): IAsyncEnumerable<TSource>;
    static select<TSource, TResult>(source: IAsyncEnumerable<TSource>, selector: (x: TSource) => TResult): IAsyncEnumerable<TResult>;
    static select<TSource, TKey extends keyof TSource>(source: IAsyncEnumerable<TSource>, key: TKey): IAsyncEnumerable<TSource[TKey]>;
    private static select_1<TSource, TResult>(source, selector);
    private static select_2<TSource, TKey>(source, key);
    static selectMany<TSource, Y>(source: IAsyncEnumerable<TSource>, selector: (x: TSource) => Iterable<Y>): IAsyncEnumerable<Y>;
    static single<TSource>(source: AsyncIterable<TSource>): Promise<TSource>;
    static single<TSource>(source: AsyncIterable<TSource>, predicate: (x: TSource) => boolean): Promise<TSource>;
    private static single_1<TSource>(source);
    private static single_2<TSource>(source, predicate);
    static singleOrDefault<TSource>(source: AsyncIterable<TSource>): Promise<TSource | null>;
    static singleOrDefault<TSource>(source: AsyncIterable<TSource>, predicate: (x: TSource) => boolean): Promise<TSource | null>;
    private static singleOrDefault_1<TSource>(source);
    private static singleOrDefault_2<TSource>(source, predicate);
    static skip<TSource>(source: AsyncIterable<TSource>, count: number): IAsyncEnumerable<TSource>;
    static skipWhile<TSource>(source: IAsyncEnumerable<TSource>, predicate: (x: TSource) => boolean): IAsyncEnumerable<TSource>;
    static skipWhile<TSource>(source: IAsyncEnumerable<TSource>, predicate: (x: TSource, index: number) => boolean): IAsyncEnumerable<TSource>;
    private static skipWhile_1<TSource>(source, predicate);
    private static skipWhile_2<TSource>(source, predicate);
    static ofType<TSource, TResult>(source: AsyncIterable<TSource>, type?: IConstructor<TResult> | string): IAsyncEnumerable<TResult>;
    private static orderByInner<TSource>(source, keySelector);
    static orderBy<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => string): IOrderedAsyncEnumerable<TSource>;
    static orderBy<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => string, comparer: IComparer<string>): IOrderedAsyncEnumerable<TSource>;
    static orderBy<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => number): IOrderedAsyncEnumerable<TSource>;
    static orderBy<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => number, comparer: IComparer<number>): IOrderedAsyncEnumerable<TSource>;
    static orderByDescending<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => string): IOrderedAsyncEnumerable<TSource>;
    static orderByDescending<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => string, comparer: IComparer<string>): IOrderedAsyncEnumerable<TSource>;
    static orderByDescending<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => number): IOrderedAsyncEnumerable<TSource>;
    static orderByDescending<TSource>(source: IAsyncEnumerable<TSource>, keySelector: (x: TSource) => number, comparer: IComparer<number>): IOrderedAsyncEnumerable<TSource>;
    static last<TSource>(source: AsyncIterable<TSource>): Promise<TSource>;
    static last<TSource>(source: AsyncIterable<TSource>, predicate: (x: TSource) => boolean): Promise<TSource>;
    private static last_1<T>(source);
    private static last_2<T>(source, predicate);
    static lastOrDefault<T>(source: AsyncIterable<T>): Promise<T | null>;
    static lastOrDefault<T>(source: AsyncIterable<T>, predicate: (x: T) => boolean): Promise<T | null>;
    private static lastOrDefault_1<T>(source);
    private static lastOrDefault_2<T>(source, predicate);
    static max(source: IAsyncEnumerable<number>): Promise<number>;
    static max<TSource>(source: IAsyncEnumerable<TSource>, selector: (x: TSource) => number): Promise<number>;
    private static max_1(source);
    private static max_2<TSource>(source, selector);
    static min(source: IAsyncEnumerable<number>): Promise<number>;
    static min<TSource>(source: IAsyncEnumerable<TSource>, selector: (x: TSource) => number): Promise<number>;
    private static min_1(source);
    private static min_2(source, selector);
    static range(start: number, count: number): IAsyncEnumerable<number>;
    static repeat<T>(element: T, count: number, delay?: number): IAsyncEnumerable<T>;
    private static repeat_1<T>(element, count);
    private static repeat_2<T>(element, count, delay);
    static reverse<TSource>(source: IAsyncEnumerable<TSource>): IAsyncEnumerable<TSource>;
    static sequenceEquals<TSource>(first: IAsyncEnumerable<TSource>, second: IAsyncEnumerable<TSource>): Promise<boolean>;
    static sequenceEquals<TSource>(first: IAsyncEnumerable<TSource>, second: IAsyncEnumerable<TSource>, comparer: IEqualityComparer<TSource>): Promise<boolean>;
    static sum(source: IAsyncEnumerable<number>): Promise<number>;
    static sum<TSource>(source: IAsyncEnumerable<TSource>, selector: (x: TSource) => number): Promise<number>;
    private static sum_1(source);
    private static sum_2<TSource>(source, selector);
    static take<T>(source: IAsyncEnumerable<T>, amount: number): IAsyncEnumerable<T>;
    static takeWhile<T>(source: IAsyncEnumerable<T>, predicate: (x: T) => boolean): IAsyncEnumerable<T>;
    static takeWhile<T>(source: IAsyncEnumerable<T>, predicate: (x: T, index: number) => boolean): IAsyncEnumerable<T>;
    private static takeWhile_1<T>(source, predicate);
    private static takeWhile_2<T>(source, predicate);
    static thenBy<TSource>(source: IOrderedAsyncEnumerable<TSource>, keySelector: (x: TSource) => string): IOrderedAsyncEnumerable<TSource>;
    static thenBy<TSource>(source: IOrderedAsyncEnumerable<TSource>, keySelector: (x: TSource) => string, comparer: IComparer<string>): IOrderedAsyncEnumerable<TSource>;
    static thenBy<TSource>(source: IOrderedAsyncEnumerable<TSource>, keySelector: (x: TSource) => number): IOrderedAsyncEnumerable<TSource>;
    static thenBy<TSource>(source: IOrderedAsyncEnumerable<TSource>, keySelector: (x: TSource) => number, comparer: IComparer<number>): IOrderedAsyncEnumerable<TSource>;
    static thenByDescending<TSource>(source: IOrderedAsyncEnumerable<TSource>, keySelector: (x: TSource) => string): IOrderedAsyncEnumerable<TSource>;
    static thenByDescending<TSource>(source: IOrderedAsyncEnumerable<TSource>, keySelector: (x: TSource) => string, comparer: IComparer<string>): IOrderedAsyncEnumerable<TSource>;
    static thenByDescending<TSource>(source: IOrderedAsyncEnumerable<TSource>, keySelector: (x: TSource) => number): IOrderedAsyncEnumerable<TSource>;
    static thenByDescending<TSource>(source: IOrderedAsyncEnumerable<TSource>, keySelector: (x: TSource) => number, comparer: IComparer<number>): IOrderedAsyncEnumerable<TSource>;
    static toArray<TSource>(source: IAsyncEnumerable<TSource>): Promise<TSource[]>;
    static toMap<K, V>(source: IAsyncEnumerable<V>, selector: (x: V) => K): Promise<Map<K, V[]>>;
    static toObject<TSource>(source: IAsyncEnumerable<TSource>, selector: (x: TSource) => string): Promise<{
        [key: string]: TSource;
    }>;
    static toSet<TSource>(source: IAsyncEnumerable<TSource>): Promise<Set<TSource>>;
    static union<TSource>(first: IAsyncEnumerable<TSource>, second: IAsyncEnumerable<TSource>): IAsyncEnumerable<TSource>;
    static union<TSource>(first: IAsyncEnumerable<TSource>, second: IAsyncEnumerable<TSource>, comparer: IEqualityComparer<TSource>): IAsyncEnumerable<TSource>;
    private static union_1<TSource>(first, second);
    private static union_2<TSource>(first, second, comparer);
    static where<T>(source: IAsyncEnumerable<T>, predicate: (x: T) => boolean): IAsyncEnumerable<T>;
    static where<T>(source: IAsyncEnumerable<T>, predicate: (x: T, index: number) => boolean): IAsyncEnumerable<T>;
    private static where_1<T>(source, predicate);
    private static where_2<T>(source, predicate);
    static zip<T, Y>(source: IAsyncEnumerable<T>, second: IAsyncEnumerable<Y>): IAsyncEnumerable<ITuple<T, Y>>;
    static zip<T, Y, OUT>(source: IAsyncEnumerable<T>, second: IAsyncEnumerable<Y>, resultSelector: (x: T, y: Y) => OUT): IAsyncEnumerable<OUT>;
    private static zip_1<T, Y>(source, second);
    private static zip_2<T, Y, OUT>(source, second, resultSelector);
    private constructor();
}
